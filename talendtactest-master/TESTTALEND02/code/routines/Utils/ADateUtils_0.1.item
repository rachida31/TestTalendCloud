package routines;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ADateUtils {

	/**
	 * isDate : Retourne true si le string est de type code IPI.
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Utils
	 * 
	 * {param} string("world") input: The string need to be printed.
	 * 
	 * {example} helloExemple("world") # hello world !.
	 */
	private static boolean isDate(String s, SimpleDateFormat df) {

		//Format de date
		//SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");

		if (s.trim().length() != df.toPattern().length())
			return false;

		df.setLenient(false);

		try {
			//parse the inDate parameter
			df.parse(s.trim());
		}
		catch (ParseException pe) {
			return false;
		}
		return true;
	}
	/**
	 * isDateAAAAMMJJ : Retourne true si le string est de type date au format AAAAMMJJ
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Utils
	 * 
	 * {param} string("world") input: The string need to be printed.
	 * 
	 */
	public static boolean isdateAAAAMMJJ(String s) {
		if( s == null){
			return false;
		}
		else{
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
			return isDate(s, dateFormat);
		}
	}
	
	
	/**
	 * isDateAAAA_MM_JJ : Retourne true si le string est de type date au format AAAAMMJJ
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Utils
	 * 
	 * {param} string("world") input: The string need to be printed.
	 * 
	 */
	public static boolean isdateAAAA_MM_JJ(String s) {
		if( s == null){
			return false;
		}
		else{
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
			return isDate(s, dateFormat);
		}
	}

	/**
	 * isDateJJMMYYYY : Retourne true si le string est de type date au format JJ/MM/YYYY
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Utils
	 * 
	 * {param} string("world") input: The string need to be printed.
	 * 
	 */
	public static boolean isdateJJ_MM_YYYY(String s) {
		if( s == null){
			return false;
		}
		else{
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			return isDate(s, dateFormat);
		}
	}
	
	
	public static boolean isdateJJMMYYYY(String s) {
		if( s == null){
			return false;
		}
		else{
			SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
			return isDate(s, dateFormat);
		}
	}


	/**
	 * isDateAAAAMMJJ : Retourne true si le string est de type date au format AAAAMMJJ
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} Utils
	 * 
	 * {param} string("world") input: The string need to be printed.
	 * 
	 */
	public static boolean isdateAAAA(String s) {
		if( s == null){
			return false;
		}
		else{
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy");
			return isDate(s, dateFormat);
		}
	}

	public static String formatDip4ToJJ_MM_YYYY(String s) throws ParseException {

		SimpleDateFormat dateFormatEntree = new SimpleDateFormat("yyyyMMdd");
		SimpleDateFormat dateFormatSortie = new SimpleDateFormat("dd/MM/yyyy");

		if (s != null && s.equals("000000")) {
			return "";
		} else {
			Date d = dateFormatEntree.parse(s);
			return dateFormatSortie.format(d);
		}

	}

	public static String formatDip3ToJJ_MM_YYYY(String s) throws ParseException {

		SimpleDateFormat dateFormatEntree = new SimpleDateFormat("yyMMdd");
		SimpleDateFormat dateFormatSortie = new SimpleDateFormat("dd/MM/yyyy");

		if (s != null && s.equals("000000")) {
			return "";
		} else {
			Date d = dateFormatEntree.parse(s);
			return dateFormatSortie.format(d);
		}

	}

	/**
	 * Conversion d'une duree au format HHMMSS en secondes
	 * @param duree
	 * @return
	 */
	public static int convertHHMMSStoSeconds(String duree) {

		int retour = -1;

		//On complète la chaine par des zeros
		String dureeF = ("000000" + duree).substring(duree.length());

		retour = (Integer.parseInt(dureeF.substring(0, 2)) * 3600 + Integer.parseInt(dureeF.substring(2, 4)) * 60 + Integer.parseInt(dureeF.substring(4, 6)));
		return retour;
	}


	/*Convertit une date via un calendrier grégorien
	 * 
	 * MD 22/06/2012
	 * 
	 */
	public static Date getDateCalendrierFromLong(Long lDate) {
		Date res = null;
		Calendar calendar = new GregorianCalendar();
		calendar.setTimeZone(TimeZone.getTimeZone("Europe/Paris"));
		calendar.setTimeInMillis(lDate);
		res = calendar.getTime();
		return res;
	}

	/*
	 * 
	 * MD 27/06/2012
	 */
	public static boolean isdateJJMMAA(String s) {

		SimpleDateFormat dateFormat = null;
		if(s.length() == 6){
			dateFormat = new SimpleDateFormat("ddMMyy");
		}
		if(s.length() == 5){
			dateFormat = new SimpleDateFormat("dMMyy");
		}
		return isDate(s, dateFormat);
	}
	
	public static boolean isdateAAMMJJ(String s) {

		SimpleDateFormat dateFormat = null;
		if(s.length() == 6){
			dateFormat = new SimpleDateFormat("yyMMdd");
		}
		if(s.length() == 5){
			dateFormat = new SimpleDateFormat("yyMMd");
		}
		return isDate(s, dateFormat);
	}


	/*
	 * 
	 * MD 27/06/2012
	 * Convertit une chaine DMMYY ou DDMMYY en YYYYMMDD
	 */
	public static String dateDMMYYToYYYYMMDD(String date){

		String res = "";
		String annee = "", mois = "", jour = "";
		if(date.length() == 5){
			annee = date.substring(3,5);
			mois = date.substring(1,3);
			jour = "0" + date.substring(0,1);
		}
		if(date.length() == 6){
			annee = date.substring(4,6);
			mois = date.substring(2,4);
			jour = date.substring(0,2);
		}

		res = (2000 + Integer.valueOf(annee)) +  mois + jour;

		return res;
	}
	
	/*
	 * 
	 * MD 05/09/2012
	 * Convertit une chaine YYMMD ou YYMMDD en YYYYMMDD
	 */
	public static String dateYYMMDToYYYYMMDD(String date){ 
		
		String res = "";
		String annee = "", mois = "", jour = "";
		if(date.length() == 5){
			jour = "0" + date.substring(4,5);
			mois = date.substring(2,4);
			annee = date.substring(0,2);
		}
		if(date.length() == 6){ 
			jour = date.substring(4,6);
			mois = date.substring(2,4);
			annee = date.substring(0,2);
		}

		res = (2000 + Integer.valueOf(annee)) +  mois + jour;

		return res;
	}

	/*
	 * MD 29/06/2012
	 * 
	 * Convertit une chaine MMMMSS en secondes
	 * 
	 */
	public static int convertMMMMSSInSecondes(String time){
		/* Exemple : 0120:56   120 min et 56 sec */

		String separateur = time.substring(4,5);
		String str_min = time.substring(0, time.indexOf(separateur));
		String str_sec = time.substring(time.indexOf(separateur) + 1, time.length());
		int mins = 0, secs = 0, total = 0;
		try{
			mins = Integer.valueOf(str_min).intValue();
			secs = Integer.valueOf(str_sec).intValue();
		}
		catch (Exception e) {
			// TODO: handle exception
		}
		total = mins*60 + secs;

		return total;

	}

	public static int convertMMSSInSecondes(String time){
		/* Exemple : 20:56   20 min et 56 sec */

		String separateur = ":";
		String str_min = time.substring(0, time.indexOf(separateur));
		String str_sec = time.substring(time.indexOf(separateur) + 1, time.length());
		int mins = 0, secs = 0, total = 0;
		try{
			mins = Integer.valueOf(str_min).intValue();
			secs = Integer.valueOf(str_sec).intValue();
		}
		catch (Exception e) {
			// TODO: handle exception
		}
		total = mins*60 + secs;

		return total;

	}
	
	public static int convertSPPFFormatToSecondes(String time){
		/* Exemple : 20.56   20 min et 56 sec */
		/* Exemple : 20.1    20 min et 10 sec */
		/* Exemple : .05   0 min et 5 sec */

		String separateur = ".";
		if (time.indexOf(separateur) == -1) {
			return -1;
		}
		String str_min = "0" + time.substring(0, time.indexOf(separateur));
		String str_sec = (time.substring(time.indexOf(separateur) + 1, time.length()) + "00").substring(0, 2);
		int mins = 0, secs = 0, total = 0;

		mins = Integer.valueOf(str_min).intValue();
		secs = Integer.valueOf(str_sec).intValue();

		total = mins*60 + secs;

		return total;

	}
	
	/*
	 * MD 10/09/2012
	 * 
	 * Convertit une chaine MMSSD en secondes
	 * 
	 */
	public static int convertMMSSDInSecondes(String time){
		/* Exemple : 03:56.3   3 min et 56 sec. Le dixième de seconde est ignoré.*/

		int total = 0;
		String pattern = "[0-9]{2}:[0-9]{2}.[0-9]{1}";
		if(time.matches(pattern)){
			String s_duree = time.substring(0, time.indexOf("."));
			total = convertMMSSInSecondes(s_duree);
		}
		

		return total;

	}
	

}
